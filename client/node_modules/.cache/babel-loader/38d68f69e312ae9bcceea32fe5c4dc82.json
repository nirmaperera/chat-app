{"ast":null,"code":"import React, { useEffect, useRef, useState } from 'react';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport styles from './index.module.css';\nimport SearchForm from './components/SearchForm/SearchForm';\nimport ImageItem from './components/ImageItem/ImageItem';\nimport PoweredByGiphy from './components/PoweredByGiphy/PoweredByGiphy';\nimport MasonryLayout from './components/MasonryLayout/MasonryLayout';\nimport Alert from './components/Alert/Alert';\nimport Spinner from './components/Spinner/Spinner';\nimport useSearchForm from './hooks/useSearchForm';\nimport useDebounce from './hooks/useDebounce';\nimport useMedia from './hooks/useMedia';\nimport useApi from './hooks/useApi';\nimport assetsSpinner from './assets/spinner.svg';\nimport assetsPoweredByGiphy from './assets/poweredByGiphy.png';\nimport { getComponentWrapperWidth, getDefaultMasonryConfig, getMasonryConfigExceptLast, getMediaBreakpoints } from './utils/masonry';\n\nvar ReactGiphySearchBox = function ReactGiphySearchBox(_ref) {\n  var apiKey = _ref.apiKey,\n      gifListHeight = _ref.gifListHeight,\n      gifPerPage = _ref.gifPerPage,\n      imageBackgroundColor = _ref.imageBackgroundColor,\n      library = _ref.library,\n      listItemClassName = _ref.listItemClassName,\n      listWrapperClassName = _ref.listWrapperClassName,\n      loadingImage = _ref.loadingImage,\n      masonryConfig = _ref.masonryConfig,\n      messageError = _ref.messageError,\n      messageLoading = _ref.messageLoading,\n      messageNoMatches = _ref.messageNoMatches,\n      onSearch = _ref.onSearch,\n      onSelect = _ref.onSelect,\n      poweredByGiphy = _ref.poweredByGiphy,\n      poweredByGiphyImage = _ref.poweredByGiphyImage,\n      rating = _ref.rating,\n      searchFormClassName = _ref.searchFormClassName,\n      searchPlaceholder = _ref.searchPlaceholder,\n      wrapperClassName = _ref.wrapperClassName;\n\n  var _useSearchForm = useSearchForm(),\n      query = _useSearchForm.query,\n      handleInputChange = _useSearchForm.handleInputChange,\n      handleSubmit = _useSearchForm.handleSubmit;\n\n  var debouncedQuery = useDebounce(query, 500);\n  var apiEndpoint = query ? 'search' : 'trending';\n\n  var apiUrl = function apiUrl(offset) {\n    return 'https://api.giphy.com/v1/' + library + '/' + apiEndpoint + '?api_key=' + apiKey + '&limit=' + gifPerPage + '&rating=' + rating + '&offset=' + offset + '&q=' + query;\n  };\n\n  var _useApi = useApi(),\n      _useApi$ = _useApi[0],\n      data = _useApi$.data,\n      loading = _useApi$.loading,\n      error = _useApi$.error,\n      lastPage = _useApi$.lastPage,\n      fetchImages = _useApi[1];\n\n  var masonryConfigMatchMedia = useMedia(getMediaBreakpoints(masonryConfig), getMasonryConfigExceptLast(masonryConfig), getDefaultMasonryConfig(masonryConfig)); // Fetch Giphy Api on component mount and on search query change\n\n  var _useState = useState(true),\n      firstRun = _useState[0],\n      setFirstRun = _useState[1];\n\n  var isFirstRun = useRef(true);\n  useEffect(function () {\n    fetchImages(apiUrl(0));\n    onSearch(query);\n\n    if (isFirstRun.current) {\n      isFirstRun.current = false;\n      setFirstRun(false);\n    }\n  }, [debouncedQuery]);\n  return React.createElement('div', {\n    className: '' + styles.componentWrapper + (wrapperClassName ? ' ' + wrapperClassName : ''),\n    style: {\n      width: getComponentWrapperWidth(masonryConfigMatchMedia)\n    }\n  }, React.createElement(SearchForm, {\n    value: query,\n    setValue: handleInputChange,\n    onSubmit: handleSubmit,\n    loadingData: loading,\n    searchFormClassName: searchFormClassName,\n    placeholder: searchPlaceholder\n  }), React.createElement('div', {\n    className: '' + styles.listWrapper + (listWrapperClassName ? ' ' + listWrapperClassName : ''),\n    style: {\n      height: gifListHeight\n    }\n  }, React.createElement(Alert, {\n    show: data.length === 0 && !loading && !error && !firstRun,\n    message: messageNoMatches\n  }), React.createElement(Alert, {\n    show: error,\n    message: messageError\n  }), React.createElement(Spinner, {\n    show: loading,\n    message: messageLoading,\n    image: loadingImage\n  }), React.createElement(InfiniteScroll, {\n    pageStart: 0,\n    loadMore: function loadMore(page) {\n      return fetchImages(apiUrl(page * gifPerPage), true);\n    },\n    hasMore: !loading && !lastPage,\n    useWindow: false,\n    initialLoad: false,\n    loader: !firstRun && React.createElement('div', {\n      key: 'loading'\n    }, React.createElement(Spinner, {\n      show: loading,\n      message: messageLoading,\n      image: loadingImage\n    }))\n  }, data.length > 0 && React.createElement(MasonryLayout, {\n    sizes: masonryConfig\n  }, data.map(function (item) {\n    return React.createElement(ImageItem, {\n      item: item,\n      size: masonryConfigMatchMedia.imageWidth,\n      key: item.id,\n      listItemClassName: listItemClassName,\n      onSelect: onSelect,\n      backgroundColor: imageBackgroundColor\n    });\n  })))), poweredByGiphy && React.createElement(PoweredByGiphy, {\n    image: poweredByGiphyImage\n  }));\n};\n\nReactGiphySearchBox.defaultProps = {\n  gifListHeight: '300px',\n  gifPerPage: 20,\n  imageBackgroundColor: '#eee',\n  library: 'gifs',\n  listItemClassName: '',\n  listWrapperClassName: '',\n  loadingImage: assetsSpinner,\n  masonryConfig: [{\n    columns: 2,\n    imageWidth: 120,\n    gutter: 5\n  }],\n  messageError: 'Oops! Something went wrong. Please, try again.',\n  messageLoading: 'Loading...',\n  messageNoMatches: 'No matches found.',\n  onSearch: function onSearch() {},\n  poweredByGiphy: true,\n  poweredByGiphyImage: assetsPoweredByGiphy,\n  rating: 'g',\n  searchFormClassName: '',\n  wrapperClassName: '',\n  searchPlaceholder: 'Search for GIFs'\n};\nexport default ReactGiphySearchBox;","map":{"version":3,"sources":["/Users/nirmaperera/Desktop/chat-app/client/node_modules/react-giphy-searchbox/es/index.js"],"names":["React","useEffect","useRef","useState","InfiniteScroll","styles","SearchForm","ImageItem","PoweredByGiphy","MasonryLayout","Alert","Spinner","useSearchForm","useDebounce","useMedia","useApi","assetsSpinner","assetsPoweredByGiphy","getComponentWrapperWidth","getDefaultMasonryConfig","getMasonryConfigExceptLast","getMediaBreakpoints","ReactGiphySearchBox","_ref","apiKey","gifListHeight","gifPerPage","imageBackgroundColor","library","listItemClassName","listWrapperClassName","loadingImage","masonryConfig","messageError","messageLoading","messageNoMatches","onSearch","onSelect","poweredByGiphy","poweredByGiphyImage","rating","searchFormClassName","searchPlaceholder","wrapperClassName","_useSearchForm","query","handleInputChange","handleSubmit","debouncedQuery","apiEndpoint","apiUrl","offset","_useApi","_useApi$","data","loading","error","lastPage","fetchImages","masonryConfigMatchMedia","_useState","firstRun","setFirstRun","isFirstRun","current","createElement","className","componentWrapper","style","width","value","setValue","onSubmit","loadingData","placeholder","listWrapper","height","show","length","message","image","pageStart","loadMore","page","hasMore","useWindow","initialLoad","loader","key","sizes","map","item","size","imageWidth","id","backgroundColor","defaultProps","columns","gutter"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport styles from './index.module.css';\nimport SearchForm from './components/SearchForm/SearchForm';\nimport ImageItem from './components/ImageItem/ImageItem';\nimport PoweredByGiphy from './components/PoweredByGiphy/PoweredByGiphy';\nimport MasonryLayout from './components/MasonryLayout/MasonryLayout';\nimport Alert from './components/Alert/Alert';\nimport Spinner from './components/Spinner/Spinner';\nimport useSearchForm from './hooks/useSearchForm';\nimport useDebounce from './hooks/useDebounce';\nimport useMedia from './hooks/useMedia';\nimport useApi from './hooks/useApi';\nimport assetsSpinner from './assets/spinner.svg';\nimport assetsPoweredByGiphy from './assets/poweredByGiphy.png';\nimport { getComponentWrapperWidth, getDefaultMasonryConfig, getMasonryConfigExceptLast, getMediaBreakpoints } from './utils/masonry';\n\nvar ReactGiphySearchBox = function ReactGiphySearchBox(_ref) {\n  var apiKey = _ref.apiKey,\n      gifListHeight = _ref.gifListHeight,\n      gifPerPage = _ref.gifPerPage,\n      imageBackgroundColor = _ref.imageBackgroundColor,\n      library = _ref.library,\n      listItemClassName = _ref.listItemClassName,\n      listWrapperClassName = _ref.listWrapperClassName,\n      loadingImage = _ref.loadingImage,\n      masonryConfig = _ref.masonryConfig,\n      messageError = _ref.messageError,\n      messageLoading = _ref.messageLoading,\n      messageNoMatches = _ref.messageNoMatches,\n      onSearch = _ref.onSearch,\n      onSelect = _ref.onSelect,\n      poweredByGiphy = _ref.poweredByGiphy,\n      poweredByGiphyImage = _ref.poweredByGiphyImage,\n      rating = _ref.rating,\n      searchFormClassName = _ref.searchFormClassName,\n      searchPlaceholder = _ref.searchPlaceholder,\n      wrapperClassName = _ref.wrapperClassName;\n\n  var _useSearchForm = useSearchForm(),\n      query = _useSearchForm.query,\n      handleInputChange = _useSearchForm.handleInputChange,\n      handleSubmit = _useSearchForm.handleSubmit;\n\n  var debouncedQuery = useDebounce(query, 500);\n\n  var apiEndpoint = query ? 'search' : 'trending';\n  var apiUrl = function apiUrl(offset) {\n    return 'https://api.giphy.com/v1/' + library + '/' + apiEndpoint + '?api_key=' + apiKey + '&limit=' + gifPerPage + '&rating=' + rating + '&offset=' + offset + '&q=' + query;\n  };\n\n  var _useApi = useApi(),\n      _useApi$ = _useApi[0],\n      data = _useApi$.data,\n      loading = _useApi$.loading,\n      error = _useApi$.error,\n      lastPage = _useApi$.lastPage,\n      fetchImages = _useApi[1];\n\n  var masonryConfigMatchMedia = useMedia(getMediaBreakpoints(masonryConfig), getMasonryConfigExceptLast(masonryConfig), getDefaultMasonryConfig(masonryConfig));\n\n  // Fetch Giphy Api on component mount and on search query change\n\n  var _useState = useState(true),\n      firstRun = _useState[0],\n      setFirstRun = _useState[1];\n\n  var isFirstRun = useRef(true);\n  useEffect(function () {\n    fetchImages(apiUrl(0));\n    onSearch(query);\n\n    if (isFirstRun.current) {\n      isFirstRun.current = false;\n      setFirstRun(false);\n    }\n  }, [debouncedQuery]);\n\n  return React.createElement(\n    'div',\n    {\n      className: '' + styles.componentWrapper + (wrapperClassName ? ' ' + wrapperClassName : ''),\n      style: { width: getComponentWrapperWidth(masonryConfigMatchMedia) }\n    },\n    React.createElement(SearchForm, {\n      value: query,\n      setValue: handleInputChange,\n      onSubmit: handleSubmit,\n      loadingData: loading,\n      searchFormClassName: searchFormClassName,\n      placeholder: searchPlaceholder\n    }),\n    React.createElement(\n      'div',\n      {\n        className: '' + styles.listWrapper + (listWrapperClassName ? ' ' + listWrapperClassName : ''),\n        style: { height: gifListHeight }\n      },\n      React.createElement(Alert, {\n        show: data.length === 0 && !loading && !error && !firstRun,\n        message: messageNoMatches\n      }),\n      React.createElement(Alert, { show: error, message: messageError }),\n      React.createElement(Spinner, { show: loading, message: messageLoading, image: loadingImage }),\n      React.createElement(\n        InfiniteScroll,\n        {\n          pageStart: 0,\n          loadMore: function loadMore(page) {\n            return fetchImages(apiUrl(page * gifPerPage), true);\n          },\n          hasMore: !loading && !lastPage,\n          useWindow: false,\n          initialLoad: false,\n          loader: !firstRun && React.createElement(\n            'div',\n            { key: 'loading' },\n            React.createElement(Spinner, {\n              show: loading,\n              message: messageLoading,\n              image: loadingImage\n            })\n          )\n        },\n        data.length > 0 && React.createElement(\n          MasonryLayout,\n          { sizes: masonryConfig },\n          data.map(function (item) {\n            return React.createElement(ImageItem, {\n              item: item,\n              size: masonryConfigMatchMedia.imageWidth,\n              key: item.id,\n              listItemClassName: listItemClassName,\n              onSelect: onSelect,\n              backgroundColor: imageBackgroundColor\n            });\n          })\n        )\n      )\n    ),\n    poweredByGiphy && React.createElement(PoweredByGiphy, { image: poweredByGiphyImage })\n  );\n};\n\nReactGiphySearchBox.defaultProps = {\n  gifListHeight: '300px',\n  gifPerPage: 20,\n  imageBackgroundColor: '#eee',\n  library: 'gifs',\n  listItemClassName: '',\n  listWrapperClassName: '',\n  loadingImage: assetsSpinner,\n  masonryConfig: [{ columns: 2, imageWidth: 120, gutter: 5 }],\n  messageError: 'Oops! Something went wrong. Please, try again.',\n  messageLoading: 'Loading...',\n  messageNoMatches: 'No matches found.',\n  onSearch: function onSearch() {},\n  poweredByGiphy: true,\n  poweredByGiphyImage: assetsPoweredByGiphy,\n  rating: 'g',\n  searchFormClassName: '',\n  wrapperClassName: '',\n  searchPlaceholder: 'Search for GIFs'\n};\n\nexport default ReactGiphySearchBox;"]},"metadata":{},"sourceType":"module"}