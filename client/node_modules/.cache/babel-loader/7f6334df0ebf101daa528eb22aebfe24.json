{"ast":null,"code":"import { useState, useEffect } from 'react';\n\nfunction useDebounce(value, delay) {\n  var _useState = useState(value),\n      debouncedValue = _useState[0],\n      setDebouncedValue = _useState[1];\n\n  useEffect(function () {\n    // Set debouncedValue to value (passed in) after the specified delay\n    var handler = setTimeout(function () {\n      setDebouncedValue(value);\n    }, delay); // Return a cleanup function that will be called every time\n    // useEffect is re-called. useEffect will only be re-called\n    // if value changes (see the inputs array below).\n    // This is how we prevent debouncedValue from changing if value is\n    // changed within the delay period. Timeout gets cleared and restarted.\n    // To put it in context, if the user is typing within our app's\n    // search box, we don't want the debouncedValue to update until\n    // they've stopped typing for more than 500ms.\n\n    return function () {\n      clearTimeout(handler);\n    };\n  }, // Only re-call effect if value changes\n  // You could also add the \"delay\" var to inputs array if you\n  // need to be able to change that dynamically.\n  [value]);\n  return debouncedValue;\n}\n\nexport default useDebounce;","map":{"version":3,"sources":["/Users/nirmaperera/Desktop/chat-app/client/node_modules/react-giphy-searchbox/es/hooks/useDebounce.js"],"names":["useState","useEffect","useDebounce","value","delay","_useState","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,KAA5B,EAAmC;AACjC,MAAIC,SAAS,GAAGL,QAAQ,CAACG,KAAD,CAAxB;AAAA,MACIG,cAAc,GAAGD,SAAS,CAAC,CAAD,CAD9B;AAAA,MAEIE,iBAAiB,GAAGF,SAAS,CAAC,CAAD,CAFjC;;AAIAJ,EAAAA,SAAS,CAAC,YAAY;AACpB;AACA,QAAIO,OAAO,GAAGC,UAAU,CAAC,YAAY;AACnCF,MAAAA,iBAAiB,CAACJ,KAAD,CAAjB;AACD,KAFuB,EAErBC,KAFqB,CAAxB,CAFoB,CAMpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAAO,YAAY;AACjBM,MAAAA,YAAY,CAACF,OAAD,CAAZ;AACD,KAFD;AAGD,GAjBQ,EAkBT;AACA;AACA;AACA,GAACL,KAAD,CArBS,CAAT;AAuBA,SAAOG,cAAP;AACD;;AAED,eAAeJ,WAAf","sourcesContent":["import { useState, useEffect } from 'react';\n\nfunction useDebounce(value, delay) {\n  var _useState = useState(value),\n      debouncedValue = _useState[0],\n      setDebouncedValue = _useState[1];\n\n  useEffect(function () {\n    // Set debouncedValue to value (passed in) after the specified delay\n    var handler = setTimeout(function () {\n      setDebouncedValue(value);\n    }, delay);\n\n    // Return a cleanup function that will be called every time\n    // useEffect is re-called. useEffect will only be re-called\n    // if value changes (see the inputs array below).\n    // This is how we prevent debouncedValue from changing if value is\n    // changed within the delay period. Timeout gets cleared and restarted.\n    // To put it in context, if the user is typing within our app's\n    // search box, we don't want the debouncedValue to update until\n    // they've stopped typing for more than 500ms.\n    return function () {\n      clearTimeout(handler);\n    };\n  },\n  // Only re-call effect if value changes\n  // You could also add the \"delay\" var to inputs array if you\n  // need to be able to change that dynamically.\n  [value]);\n\n  return debouncedValue;\n}\n\nexport default useDebounce;"]},"metadata":{},"sourceType":"module"}